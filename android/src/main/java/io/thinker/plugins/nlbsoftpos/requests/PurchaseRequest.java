package io.thinker.plugins.nlbsoftpos.requests;

import io.thinker.plugins.nlbsoftpos.utils.ValidationResult;

import com.getcapacitor.PluginCall;

import java.util.ArrayList;
import java.util.Objects;

public class PurchaseRequest {

    public String pin; // optional | PIN code for logging into the IPS application | 4 character
    public String amount; // required | Transaction amount | Two decimals (XXX.YY)
    public String packageName; // required | The package name of the application sending the intent
    public String transactionType; // required | Defines type of the transaction (POS, IPS) | POS, IPS
    public String transactionClass; // required | Defines class of the transaction (purchase, void)
    // public String authorizationCode; // required for void | Sent in void transaction, receipt data of original request contains this code
    public String merchantUniqueID; // required | Unique identifier of the merchantâ€™s transaction


    public static PurchaseRequest mapFromPluginCall(PluginCall call) throws Exception {
      PurchaseRequest request = new PurchaseRequest();

        request.pin = call.getString("pin");
        request.amount = call.getString("amount");
        request.packageName = call.getString("packageName");
        request.transactionType = call.getString("transactionType");
        request.transactionClass = call.getString("transactionClass");
      // this.authorizationCode = call.getString("authorizationCode");
        request.merchantUniqueID = call.getString("merchantUniqueID");

      return request;
    }

    public ValidationResult validateRequestData() {
      ValidationResult result = new ValidationResult();
      result.setIsSuccessful(true);
      result.setErrorMessages(new ArrayList<String>());

      // validate pin
      if(pin != null && !pin.trim().isEmpty() && pin.length() != 4) {
        result.setIsSuccessful(false);
        result.getErrorMessages().add("PIN code is optional parameter, but if you decide to send it via request then it must be exactly 4 characters long!");
      }

      // validate amount - required and must have at max 2 decimals

      // validate packageName - required param
      if(packageName == null || packageName.trim().isEmpty()) {
        result.setIsSuccessful(false);
        result.getErrorMessages().add("Mandatory parameter [packageName]! Package name of your application is mandatory field!");
      }

      // validate transactionType
      if(transactionType == null || transactionType.trim().isEmpty() || (!Objects.equals(transactionType, "POS") && !Objects.equals(transactionType, "IPS"))) {
        result.setIsSuccessful(false);
        result.getErrorMessages().add("Mandatory parameter [transactionType]! Transaction type must be either 'POS' or 'IPS'!");
      }

      // validate transactionClass
      if(transactionClass == null || transactionClass.trim().isEmpty() || (!Objects.equals(transactionClass, "purchase") && !Objects.equals(transactionClass, "void"))) {
        result.setIsSuccessful(false);
        result.getErrorMessages().add("Mandatory parameter [transactionClass]! Transaction type must be either 'purchase' or 'void'!");
      }

      // transactionClass must be purchase
      if(!Objects.equals(transactionClass, "purchase")) {
        result.setIsSuccessful(false);
        result.getErrorMessages().add("Parameter [transactionClass] must be of type 'purchase'!");
      }

      // validate authorizationCode
//      if(Objects.equals(transactionClass, "void") && (authorizationCode == null || authorizationCode.trim().isEmpty())) {
//        result.setIsSuccessful(false);
//        result.getErrorMessages().add("Mandatory parameter [authorizationCode]! You must send authorization code to make a void transaction!");
//      }

      // merchantUniqueID
      if(packageName == null || packageName.trim().isEmpty()) {
        result.setIsSuccessful(false);
        result.getErrorMessages().add("Mandatory parameter [merchantUniqueID]! Merchant unique ID is reference generated by your application to correlate transactions!");
      }

      return result;
    }

    public void prefillData() {
      this.transactionClass = "purchase";
    }
}
